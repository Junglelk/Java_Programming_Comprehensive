package application;

public class GenericSort {

	public static void main(String[] args) {
		/*
		 * 下面那种声明模式已不推荐deprecated
		 * 仅作练习使用
		 */
		Integer[] 	intArray 	 = {new Integer(1),new Integer(5),new Integer(4)};// TODO 自动生成的方法存根
		Double[]  	doubleArray	 = {new Double(3.5),new Double(7.5),new Double(3.8),new Double(4.5)};
		Character[] charArray  	 = {new Character('a'),new Character('q'),new Character('s'),new Character('b')};
		String[]	stringsArray = {"Tom","Jerry","Kim"};
		
		sort(intArray);
		sort(doubleArray);
		sort(charArray);
		sort(stringsArray);
		
		System.out.print("Sorted Integer object: ");
		printList(intArray);
		System.out.print("Sorted Double object: ");
		printList(doubleArray);
		System.out.print("Sorted Character object: ");
		printList(charArray);
		System.out.print("Sorted String object: ");
		printList(stringsArray);
	}
	
	/**
	 * public static <E> void sort(E list) {
	 * }
	 * 错完了
	 * 首先泛型E应该是可比较类型，须继承comparable接口
	 * 其次参数类型是泛型数组，而非单个泛型
	 */
	public static <E extends Comparable<E>> void sort(E[] list) {
		E currentMin;
		int currentMinIndex;
		for(int i = 0;i<list.length-1;i++) {
			currentMin = list[i];
			currentMinIndex = i;
			for(int j = i+1;j<list.length;j++) {
				if(currentMin.compareTo(list[j])>0) {
					currentMin 		= list[j];
					currentMinIndex = j;
				}
			}
			if(currentMinIndex!=i) {
				list[currentMinIndex] = list[i];
				list[i] = currentMin;
			}
		}
	}
	/*
	 * 冒泡排序，此外，因为是静态方法
	 * 所以排序完后，数组本身就已经改变
	 * 可喜可贺可喜可贺
	 */
	
	public static <E> void printList(E[] list) {
		
	}
	

}
